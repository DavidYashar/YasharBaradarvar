package sorting;
import java.util.Random;

public class mergesSort {
  public static void main(String[] args){
    Random rand = new Random();
    int [] numbers = new int[10];

    for(int i =0; i< numbers.length; i++){
        numbers[i] = rand.nextInt(100);
    }

    System.out.println("before: ");
    printArray(numbers);
    mergeSort(numbers);
   
    System.out.println("\nAfter");
    printArray(numbers);
  }
    private static void mergeSort(int [] inputArray){
        int inputLength = inputArray.length;

        if(inputLength < 2){
            return;
        }

        int midIndex = inputLength /2;
        int [] leftHalfs = new int[midIndex];
        int [] rightHalfs = new int[inputLength - midIndex];

        for(int i = 0; i< midIndex; i++){
            leftHalfs[i] = inputArray[i];
        }
        for(int i = midIndex; i < inputLength; i++){
            rightHalfs[i - midIndex]= inputArray[i];
        }

       
        mergeSort(leftHalfs);
        mergeSort(rightHalfs);

       merge(inputArray, leftHalfs, rightHalfs);
    }

    private static void merge(int [] inputArray, int[] leftHalfs, int[] rightHalfs){
        int leftSizes = leftHalfs.length;
        int rightSizes = rightHalfs.length;

        int i =0;
        int j = 0;
        int k = 0;

while(i < leftSizes && j < rightSizes){
if(leftHalfs[i] <= rightHalfs[j]){
    inputArray[k] = leftHalfs[i];
    i++;
}else{
    inputArray[k] = rightHalfs[j];
    j++;
}
k++;
}

while(i < leftSizes){
    inputArray[k] = leftHalfs[i];
    i++;
    k++;
}

while(j < rightSizes){
    inputArray[k] = rightHalfs[j];
    j++;
    k++;
}
    }

    private static void printArray(int [] numbers){
        for(int i = 0; i< numbers.length; i++){
            System.out.println(numbers[i]);
        }
    }
  }
